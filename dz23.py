from random import randint as ran, shuffle
import asyncio
import logging
import sys
import time

from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext


API_TOKEN ='5485255207:AAEPMHtr1dJPAz82t1EYeNbl8-hicVG7yOU'
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
storege = MemoryStorage()
dp = Dispatcher(bot, storage=storege)

class Form_Answers(StatesGroup):
    started = State()
    question_state = State()
    game = State()
    end = State()


start_kb = types.InlineKeyboardMarkup()
start_kb.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å',callback_data='–ù–∞—á–∞—Ç—å'))
start_kb.add(types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞',callback_data='–ü—Ä–∞–≤–∏–ª–∞'))

rules_kb = types.InlineKeyboardMarkup()
rules_kb.add(types.InlineKeyboardButton('–ù–∞—á–∞—Ç—å',callback_data='–ù–∞—á–∞—Ç—å'))

next_kb = types.InlineKeyboardMarkup()
next_kb.add(types.InlineKeyboardButton('–î–∞–ª–µ–µ',callback_data= '–î–∞–ª–µ–µ'))
next_kb.add(types.InlineKeyboardButton('–°—Ç–æ–ø',callback_data='–°—Ç–æ–ø'))

@dp.message_handler(commands=['start'],state='*')
async def starting_bot(message: types.Message, state: FSMContext):
        await state.finish()
        await message.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É —Å –ø–æ–º–æ—â—å—é /start',reply_markup=start_kb)
        await Form_Answers.started.set()



@dp.callback_query_handler(state=Form_Answers.started)
async def starting_bot(query: types.CallbackQuery, state: FSMContext):    
    if query.data == '–ù–∞—á–∞—Ç—å':
        await state.update_data(correct=0)
        await state.update_data(wrong=0)
        await state.update_data(game=0)
        znaks = ['+', '-', '/','*']
        question = str(ran(1,100)) + znaks[ran(0,3)] + str(ran(1,100))
        answers_kb = types.InlineKeyboardMarkup()
        answers_kb.add(types.InlineKeyboardButton(question,callback_data='correct'))
        for i in range(3):
            question_variant = str(ran(1,100)) + znaks[ran(0,3)] + str(ran(1,100))
            answers_kb.add(types.InlineKeyboardButton(question_variant,callback_data='not'))
        shuffle(answers_kb['inline_keyboard'])

        await state.update_data(question_state=eval(question))
        await query.message.edit_text(eval(question),reply_markup=answers_kb)
        await Form_Answers.question_state.set()

    elif query.data == '–ü—Ä–∞–≤–∏–ª–∞':
            await query.message.edit_text('–ü—Ä–∞–≤–∏–ª–∞:\n –ë–æ—Ç –¥–∞—ë—Ç —Ä–µ—à–µ–Ω–∏–µ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π(+,-,*,/)', reply_markup=start_kb)

@dp.callback_query_handler(state=Form_Answers.question_state)
async def is_correct(query: types.CallbackQuery, state: FSMContext):
    async with state.proxy( ) as data:
        answer = data['question_state']
        data['game']+=1
        if query.data == 'correct':
                text = '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!'
                data['correct']+=1
        else:
             text = '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!'
             data['wrong']+=1
        await query.message.edit_text(text,reply_markup=next_kb)
        await Form_Answers.game.set()

@dp.callback_query_handler(state=Form_Answers.game)
async def is_stopgame(query: types.CallbackQuery, state: FSMContext):
        if query.data == '–°—Ç–æ–ø':
              await query.message.reply('–û–∫–µ–π, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é –∏–≥—Ä—É', reply_markup=types.ReplyKeyboardRemove())
              await asyncio.sleep(2)
              await query.message.answer('–ù–∞–ø–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞')
              await Form_Answers.end.set()
        else:
            znaks = ['*','-','/','+']
            question = str(ran(1,100)) + znaks[ran(0,3)] + str(ran(1,100))
            answers_kb = types.InlineKeyboardMarkup()
            answers_kb.add(types.InlineKeyboardButton(question,callback_data='correct'))
            for i in range(3):
                question_variant = str(ran(1,100)) + znaks[ran(0,3)] + str(ran(1,100))
                answers_kb.add(types.InlineKeyboardButton(question_variant,callback_data='not'))
            shuffle(answers_kb['inline_keyboard'])


            await state.update_data(question_state=eval(question))
            await query.message.edit_text(eval(question),reply_markup=answers_kb)
            await Form_Answers.question_state.set()

@dp.message_handler(state=Form_Answers.end)
async def game_results(message: types.Message, state: FSMContext):
        async with state.proxy() as data:
            yes = data['correct']
            no = data['wrong']
            all_answers = data['game']
            await message.answer(f'–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:\n –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {all_answers} \n –í—Å–µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {yes } \n –í—Å–µ–≥–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö {no}' )
            time.sleep(1.5)

            if int(yes) > int(no):
                    await message.answer('–£ —Ç–µ–±—è –º–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ üòò')
            elif int(yes) < int(no):
                  await message.answer('–£ —Ç–µ–±—è –º–Ω–æ–≥–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ üò¢')
            else:
                  await message.answer('–£ —Ç–µ–±–µ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤')

            await Form_Answers.started.set()
            time.sleep(3.0)
            await message.answer('–ù–∞–∂–º–∏ "–ù–∞—á–∞—Ç—å " –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã',reply_markup=start_kb)


@dp.message_handler(state='*')
async def game_result(message: types.Message, state: FSMContext):
      await message.delete()

@dp.callback_query_handler(state='*')
async def is_stopgame(query: types.CallbackQuery, state:FSMContext):
      await query.message.delete()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)